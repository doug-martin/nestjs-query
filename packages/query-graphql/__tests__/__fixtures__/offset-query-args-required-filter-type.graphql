type TestQuery {
  idField: ID!
  idFieldOption: ID
  stringField: String!
  stringFieldOptional: String
  booleanField: Boolean!
  booleanFieldOptional: Boolean
  numberField: Float!
  numberFieldOptional: Float
  floatField: Float!
  floatFieldOptional: Float
  intField: Int!
  intFieldOptional: Int
  timestampField: Timestamp!
  timestampFieldOptional: Timestamp
  date: DateTime!
  dateOptional: DateTime
}

"""
`Date` type as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type TestFilterRequiredDto {
  requiredFilterableField: String!
}

type OffsetPageInfo {
  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean
}

type OffsetQueryOptionsDTO {
  idField: ID!
  idFieldOption: ID
  stringField: String!
  stringFieldOptional: String
  booleanField: Boolean!
  booleanFieldOptional: Boolean
  numberField: Float!
  numberFieldOptional: Float
  floatField: Float!
  floatFieldOptional: Float
  intField: Int!
  intFieldOptional: Int
  timestampField: Timestamp!
  timestampFieldOptional: Timestamp
  date: DateTime!
  dateOptional: DateTime
}

type Query {
  test(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to filter the records returned."""
    filter: TestFilterRequiredDtoFilter!

    """Specify to sort results."""
    sorting: [TestFilterRequiredDtoSort!] = []
  ): String!
}

input OffsetPaging {
  """Limit the number of records returned"""
  limit: Int

  """Offset to start returning records from"""
  offset: Int
}

input TestFilterRequiredDtoFilter {
  and: [TestFilterRequiredDtoFilter!]
  or: [TestFilterRequiredDtoFilter!]
  requiredFilterableField: StringFieldComparison!
}

input StringFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: String
  neq: String
  gt: String
  gte: String
  lt: String
  lte: String
  like: String
  notLike: String
  iLike: String
  notILike: String
  in: [String!]
  notIn: [String!]
}

input TestFilterRequiredDtoSort {
  field: TestFilterRequiredDtoSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum TestFilterRequiredDtoSortFields {
  requiredFilterableField
}

"""Sort Directions"""
enum SortDirection {
  ASC
  DESC
}

"""Sort Nulls Options"""
enum SortNulls {
  NULLS_FIRST
  NULLS_LAST
}
