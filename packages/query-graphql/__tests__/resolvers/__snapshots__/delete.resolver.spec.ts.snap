// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`DeleteResolver #deleteMany should not create a new delete type if the DeleteManyArgs is supplied 1`] = `
type TestResolverDTO {
  id: ID!
  stringField: String!
}

type DeleteManyResponse {
  """The number of records deleted."""
  deletedCount: Int!
}

type TestResolverDTODeleteResponse {
  id: ID
  stringField: String
}

type Query {
  test: TestResolverDTO!
}

type Mutation {
  deleteOneTestResolverDTO(input: DeleteOneTestResolverDTOInput!): TestResolverDTODeleteResponse!
  deleteManyTestResolverDTOS(input: CustomDeleteManyInput!): DeleteManyResponse!
}

input DeleteOneTestResolverDTOInput {
  """The id of the record to delete."""
  id: ID!
}

input CustomDeleteManyInput {
  """Filter to find records to delete"""
  filter: TestResolverDTODeleteFilter!
  foo: String!
}

input TestResolverDTODeleteFilter {
  and: [TestResolverDTODeleteFilter!]
  or: [TestResolverDTODeleteFilter!]
  id: IDFilterComparison
  stringField: StringFieldComparison
}

input IDFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: ID
  neq: ID
  gt: ID
  gte: ID
  lt: ID
  lte: ID
  like: ID
  notLike: ID
  iLike: ID
  notILike: ID
  in: [ID!]
  notIn: [ID!]
}

input StringFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: String
  neq: String
  gt: String
  gte: String
  lt: String
  lte: String
  like: String
  notLike: String
  iLike: String
  notILike: String
  in: [String!]
  notIn: [String!]
}

`;

exports[`DeleteResolver #deleteMany should not expose delete many method if disabled 1`] = `
type TestResolverDTO {
  id: ID!
  stringField: String!
}

type TestResolverDTODeleteResponse {
  id: ID
  stringField: String
}

type Query {
  test: TestResolverDTO!
}

type Mutation {
  deleteOneTestResolverDTO(input: DeleteOneTestResolverDTOInput!): TestResolverDTODeleteResponse!
}

input DeleteOneTestResolverDTOInput {
  """The id of the record to delete."""
  id: ID!
}

`;

exports[`DeleteResolver #deleteOne should not expose delete one method if disabled 1`] = `
type TestResolverDTO {
  id: ID!
  stringField: String!
}

type DeleteManyResponse {
  """The number of records deleted."""
  deletedCount: Int!
}

type Query {
  test: TestResolverDTO!
}

type Mutation {
  deleteManyTestResolverDTOS(input: DeleteManyTestResolverDTOSInput!): DeleteManyResponse!
}

input DeleteManyTestResolverDTOSInput {
  """Filter to find records to delete"""
  filter: TestResolverDTODeleteFilter!
}

input TestResolverDTODeleteFilter {
  and: [TestResolverDTODeleteFilter!]
  or: [TestResolverDTODeleteFilter!]
  id: IDFilterComparison
  stringField: StringFieldComparison
}

input IDFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: ID
  neq: ID
  gt: ID
  gte: ID
  lt: ID
  lte: ID
  like: ID
  notLike: ID
  iLike: ID
  notILike: ID
  in: [ID!]
  notIn: [ID!]
}

input StringFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: String
  neq: String
  gt: String
  gte: String
  lt: String
  lte: String
  like: String
  notLike: String
  iLike: String
  notILike: String
  in: [String!]
  notIn: [String!]
}

`;

exports[`DeleteResolver #deleteOne should use the provided DeleteOneInput type 1`] = `
type TestResolverDTO {
  id: ID!
  stringField: String!
}

type DeleteManyResponse {
  """The number of records deleted."""
  deletedCount: Int!
}

type TestResolverDTODeleteResponse {
  id: ID
  stringField: String
}

type Query {
  test: TestResolverDTO!
}

type Mutation {
  deleteOneTestResolverDTO(input: CustomDeleteOneInput!): TestResolverDTODeleteResponse!
  deleteManyTestResolverDTOS(input: DeleteManyTestResolverDTOSInput!): DeleteManyResponse!
}

input CustomDeleteOneInput {
  id: String!
  foo: String!
}

input DeleteManyTestResolverDTOSInput {
  """Filter to find records to delete"""
  filter: TestResolverDTODeleteFilter!
}

input TestResolverDTODeleteFilter {
  and: [TestResolverDTODeleteFilter!]
  or: [TestResolverDTODeleteFilter!]
  id: IDFilterComparison
  stringField: StringFieldComparison
}

input IDFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: ID
  neq: ID
  gt: ID
  gte: ID
  lt: ID
  lte: ID
  like: ID
  notLike: ID
  iLike: ID
  notILike: ID
  in: [ID!]
  notIn: [ID!]
}

input StringFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: String
  neq: String
  gt: String
  gte: String
  lt: String
  lte: String
  like: String
  notLike: String
  iLike: String
  notILike: String
  in: [String!]
  notIn: [String!]
}

`;

exports[`DeleteResolver deleted subscription should add subscription types if enableSubscriptions is true 1`] = `
type TestResolverDTO {
  id: ID!
  stringField: String!
}

type DeleteManyResponse {
  """The number of records deleted."""
  deletedCount: Int!
}

type TestResolverDTODeleteResponse {
  id: ID
  stringField: String
}

type Query {
  test: TestResolverDTO!
}

type Mutation {
  deleteOneTestResolverDTO(input: DeleteOneTestResolverDTOInput!): TestResolverDTODeleteResponse!
  deleteManyTestResolverDTOS(input: DeleteManyTestResolverDTOSInput!): DeleteManyResponse!
}

input DeleteOneTestResolverDTOInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyTestResolverDTOSInput {
  """Filter to find records to delete"""
  filter: TestResolverDTODeleteFilter!
}

input TestResolverDTODeleteFilter {
  and: [TestResolverDTODeleteFilter!]
  or: [TestResolverDTODeleteFilter!]
  id: IDFilterComparison
  stringField: StringFieldComparison
}

input IDFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: ID
  neq: ID
  gt: ID
  gte: ID
  lt: ID
  lte: ID
  like: ID
  notLike: ID
  iLike: ID
  notILike: ID
  in: [ID!]
  notIn: [ID!]
}

input StringFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: String
  neq: String
  gt: String
  gte: String
  lt: String
  lte: String
  like: String
  notLike: String
  iLike: String
  notILike: String
  in: [String!]
  notIn: [String!]
}

type Subscription {
  deletedOneTestResolverDTO(input: DeleteOneTestResolverDTOSubscriptionFilterInput): TestResolverDTODeleteResponse!
  deletedManyTestResolverDTOS: DeleteManyResponse!
}

input DeleteOneTestResolverDTOSubscriptionFilterInput {
  """Specify to filter the records returned."""
  filter: TestResolverDTOSubscriptionFilter!
}

input TestResolverDTOSubscriptionFilter {
  and: [TestResolverDTOSubscriptionFilter!]
  or: [TestResolverDTOSubscriptionFilter!]
  id: IDFilterComparison
  stringField: StringFieldComparison
}

`;

exports[`DeleteResolver deleted subscription should add subscription types if many.enableSubscriptions is true 1`] = `
type TestResolverDTO {
  id: ID!
  stringField: String!
}

type DeleteManyResponse {
  """The number of records deleted."""
  deletedCount: Int!
}

type TestResolverDTODeleteResponse {
  id: ID
  stringField: String
}

type Query {
  test: TestResolverDTO!
}

type Mutation {
  deleteOneTestResolverDTO(input: DeleteOneTestResolverDTOInput!): TestResolverDTODeleteResponse!
  deleteManyTestResolverDTOS(input: DeleteManyTestResolverDTOSInput!): DeleteManyResponse!
}

input DeleteOneTestResolverDTOInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyTestResolverDTOSInput {
  """Filter to find records to delete"""
  filter: TestResolverDTODeleteFilter!
}

input TestResolverDTODeleteFilter {
  and: [TestResolverDTODeleteFilter!]
  or: [TestResolverDTODeleteFilter!]
  id: IDFilterComparison
  stringField: StringFieldComparison
}

input IDFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: ID
  neq: ID
  gt: ID
  gte: ID
  lt: ID
  lte: ID
  like: ID
  notLike: ID
  iLike: ID
  notILike: ID
  in: [ID!]
  notIn: [ID!]
}

input StringFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: String
  neq: String
  gt: String
  gte: String
  lt: String
  lte: String
  like: String
  notLike: String
  iLike: String
  notILike: String
  in: [String!]
  notIn: [String!]
}

type Subscription {
  deletedManyTestResolverDTOS: DeleteManyResponse!
}

`;

exports[`DeleteResolver deleted subscription should add subscription types if one.enableSubscriptions is true 1`] = `
type TestResolverDTO {
  id: ID!
  stringField: String!
}

type DeleteManyResponse {
  """The number of records deleted."""
  deletedCount: Int!
}

type TestResolverDTODeleteResponse {
  id: ID
  stringField: String
}

type Query {
  test: TestResolverDTO!
}

type Mutation {
  deleteOneTestResolverDTO(input: DeleteOneTestResolverDTOInput!): TestResolverDTODeleteResponse!
  deleteManyTestResolverDTOS(input: DeleteManyTestResolverDTOSInput!): DeleteManyResponse!
}

input DeleteOneTestResolverDTOInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyTestResolverDTOSInput {
  """Filter to find records to delete"""
  filter: TestResolverDTODeleteFilter!
}

input TestResolverDTODeleteFilter {
  and: [TestResolverDTODeleteFilter!]
  or: [TestResolverDTODeleteFilter!]
  id: IDFilterComparison
  stringField: StringFieldComparison
}

input IDFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: ID
  neq: ID
  gt: ID
  gte: ID
  lt: ID
  lte: ID
  like: ID
  notLike: ID
  iLike: ID
  notILike: ID
  in: [ID!]
  notIn: [ID!]
}

input StringFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: String
  neq: String
  gt: String
  gte: String
  lt: String
  lte: String
  like: String
  notLike: String
  iLike: String
  notILike: String
  in: [String!]
  notIn: [String!]
}

type Subscription {
  deletedOneTestResolverDTO(input: DeleteOneTestResolverDTOSubscriptionFilterInput): TestResolverDTODeleteResponse!
}

input DeleteOneTestResolverDTOSubscriptionFilterInput {
  """Specify to filter the records returned."""
  filter: TestResolverDTOSubscriptionFilter!
}

input TestResolverDTOSubscriptionFilter {
  and: [TestResolverDTOSubscriptionFilter!]
  or: [TestResolverDTOSubscriptionFilter!]
  id: IDFilterComparison
  stringField: StringFieldComparison
}

`;

exports[`DeleteResolver deleted subscription should not expose subscriptions if enableSubscriptions is false 1`] = `
type TestResolverDTO {
  id: ID!
  stringField: String!
}

type DeleteManyResponse {
  """The number of records deleted."""
  deletedCount: Int!
}

type TestResolverDTODeleteResponse {
  id: ID
  stringField: String
}

type Query {
  test: TestResolverDTO!
}

type Mutation {
  deleteOneTestResolverDTO(input: DeleteOneTestResolverDTOInput!): TestResolverDTODeleteResponse!
  deleteManyTestResolverDTOS(input: DeleteManyTestResolverDTOSInput!): DeleteManyResponse!
}

input DeleteOneTestResolverDTOInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyTestResolverDTOSInput {
  """Filter to find records to delete"""
  filter: TestResolverDTODeleteFilter!
}

input TestResolverDTODeleteFilter {
  and: [TestResolverDTODeleteFilter!]
  or: [TestResolverDTODeleteFilter!]
  id: IDFilterComparison
  stringField: StringFieldComparison
}

input IDFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: ID
  neq: ID
  gt: ID
  gte: ID
  lt: ID
  lte: ID
  like: ID
  notLike: ID
  iLike: ID
  notILike: ID
  in: [ID!]
  notIn: [ID!]
}

input StringFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: String
  neq: String
  gt: String
  gte: String
  lt: String
  lte: String
  like: String
  notLike: String
  iLike: String
  notILike: String
  in: [String!]
  notIn: [String!]
}

`;

exports[`DeleteResolver should create a DeleteResolver for the DTO 1`] = `
type TestResolverDTO {
  id: ID!
  stringField: String!
}

type DeleteManyResponse {
  """The number of records deleted."""
  deletedCount: Int!
}

type TestResolverDTODeleteResponse {
  id: ID
  stringField: String
}

type Query {
  test: TestResolverDTO!
}

type Mutation {
  deleteOneTestResolverDTO(input: DeleteOneTestResolverDTOInput!): TestResolverDTODeleteResponse!
  deleteManyTestResolverDTOS(input: DeleteManyTestResolverDTOSInput!): DeleteManyResponse!
}

input DeleteOneTestResolverDTOInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyTestResolverDTOSInput {
  """Filter to find records to delete"""
  filter: TestResolverDTODeleteFilter!
}

input TestResolverDTODeleteFilter {
  and: [TestResolverDTODeleteFilter!]
  or: [TestResolverDTODeleteFilter!]
  id: IDFilterComparison
  stringField: StringFieldComparison
}

input IDFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: ID
  neq: ID
  gt: ID
  gte: ID
  lt: ID
  lte: ID
  like: ID
  notLike: ID
  iLike: ID
  notILike: ID
  in: [ID!]
  notIn: [ID!]
}

input StringFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: String
  neq: String
  gt: String
  gte: String
  lt: String
  lte: String
  like: String
  notLike: String
  iLike: String
  notILike: String
  in: [String!]
  notIn: [String!]
}

`;

exports[`DeleteResolver should not expose delete methods if disabled 1`] = `
type TestResolverDTO {
  id: ID!
  stringField: String!
}

type Query {
  test: TestResolverDTO!
}

`;

exports[`DeleteResolver should use the dtoName if provided 1`] = `
type TestResolverDTO {
  id: ID!
  stringField: String!
}

type DeleteManyResponse {
  """The number of records deleted."""
  deletedCount: Int!
}

type TestDeleteResponse {
  id: ID
  stringField: String
}

type Query {
  test: TestResolverDTO!
}

type Mutation {
  deleteOneTest(input: DeleteOneTestInput!): TestDeleteResponse!
  deleteManyTests(input: DeleteManyTestsInput!): DeleteManyResponse!
}

input DeleteOneTestInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyTestsInput {
  """Filter to find records to delete"""
  filter: TestResolverDTODeleteFilter!
}

input TestResolverDTODeleteFilter {
  and: [TestResolverDTODeleteFilter!]
  or: [TestResolverDTODeleteFilter!]
  id: IDFilterComparison
  stringField: StringFieldComparison
}

input IDFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: ID
  neq: ID
  gt: ID
  gte: ID
  lt: ID
  lte: ID
  like: ID
  notLike: ID
  iLike: ID
  notILike: ID
  in: [ID!]
  notIn: [ID!]
}

input StringFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: String
  neq: String
  gt: String
  gte: String
  lt: String
  lte: String
  like: String
  notLike: String
  iLike: String
  notILike: String
  in: [String!]
  notIn: [String!]
}

`;

exports[`DeleteResolver should use the many.name option for the deleteMany if provided 1`] = `
type TestResolverDTO {
  id: ID!
  stringField: String!
}

type DeleteManyResponse {
  """The number of records deleted."""
  deletedCount: Int!
}

type TestResolverDTODeleteResponse {
  id: ID
  stringField: String
}

type Query {
  test: TestResolverDTO!
}

type Mutation {
  deleteOneTestResolverDTO(input: DeleteOneTestResolverDTOInput!): TestResolverDTODeleteResponse!
  delete_many_test(input: DeleteManyTestResolverDTOSInput!): DeleteManyResponse!
}

input DeleteOneTestResolverDTOInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyTestResolverDTOSInput {
  """Filter to find records to delete"""
  filter: TestResolverDTODeleteFilter!
}

input TestResolverDTODeleteFilter {
  and: [TestResolverDTODeleteFilter!]
  or: [TestResolverDTODeleteFilter!]
  id: IDFilterComparison
  stringField: StringFieldComparison
}

input IDFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: ID
  neq: ID
  gt: ID
  gte: ID
  lt: ID
  lte: ID
  like: ID
  notLike: ID
  iLike: ID
  notILike: ID
  in: [ID!]
  notIn: [ID!]
}

input StringFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: String
  neq: String
  gt: String
  gte: String
  lt: String
  lte: String
  like: String
  notLike: String
  iLike: String
  notILike: String
  in: [String!]
  notIn: [String!]
}

`;

exports[`DeleteResolver should use the one.name option for the deleteOne if provided 1`] = `
type TestResolverDTO {
  id: ID!
  stringField: String!
}

type DeleteManyResponse {
  """The number of records deleted."""
  deletedCount: Int!
}

type TestResolverDTODeleteResponse {
  id: ID
  stringField: String
}

type Query {
  test: TestResolverDTO!
}

type Mutation {
  delete_one_test(input: DeleteOneTestResolverDTOInput!): TestResolverDTODeleteResponse!
  deleteManyTestResolverDTOS(input: DeleteManyTestResolverDTOSInput!): DeleteManyResponse!
}

input DeleteOneTestResolverDTOInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyTestResolverDTOSInput {
  """Filter to find records to delete"""
  filter: TestResolverDTODeleteFilter!
}

input TestResolverDTODeleteFilter {
  and: [TestResolverDTODeleteFilter!]
  or: [TestResolverDTODeleteFilter!]
  id: IDFilterComparison
  stringField: StringFieldComparison
}

input IDFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: ID
  neq: ID
  gt: ID
  gte: ID
  lt: ID
  lte: ID
  like: ID
  notLike: ID
  iLike: ID
  notILike: ID
  in: [ID!]
  notIn: [ID!]
}

input StringFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: String
  neq: String
  gt: String
  gte: String
  lt: String
  lte: String
  like: String
  notLike: String
  iLike: String
  notILike: String
  in: [String!]
  notIn: [String!]
}

`;
