type TestResolverDTO {
  id: ID!
  stringField: String!
}

type Query {
  test: TestResolverDTO!
}

type Mutation {
  createOneTestResolverDTO(input: CreateOneTestResolverDTOInput!): TestResolverDTO!
  createManyTestResolverDTOS(input: CreateManyTestResolverDTOSInput!): [TestResolverDTO!]!
}

input CreateOneTestResolverDTOInput {
  """The record to create"""
  testResolverDTO: CreateTestResolverDTO!
}

input CreateTestResolverDTO {
  id: ID
  stringField: String
}

input CreateManyTestResolverDTOSInput {
  """Array of records to create"""
  testResolverDTOS: [CreateTestResolverDTO!]!
}

type Subscription {
  createdTestResolverDTO(input: CreateTestResolverDTOSubscriptionFilterInput): TestResolverDTO!
}

input CreateTestResolverDTOSubscriptionFilterInput {
  """Specify to filter the records returned."""
  filter: TestResolverDTOSubscriptionFilter!
}

input TestResolverDTOSubscriptionFilter {
  and: [TestResolverDTOSubscriptionFilter!]
  or: [TestResolverDTOSubscriptionFilter!]
  id: IDFilterComparison
  stringField: StringFieldComparison
}

input IDFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: ID
  neq: ID
  gt: ID
  gte: ID
  lt: ID
  lte: ID
  like: ID
  notLike: ID
  iLike: ID
  notILike: ID
  in: [ID!]
  notIn: [ID!]
}

input StringFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: String
  neq: String
  gt: String
  gte: String
  lt: String
  lte: String
  like: String
  notLike: String
  iLike: String
  notILike: String
  in: [String!]
  notIn: [String!]
}
