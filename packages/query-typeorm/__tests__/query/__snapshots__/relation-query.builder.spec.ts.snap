// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`RelationQueryBuilder #select many to many many-to-many custom join table should work with a many-to-many through a join table 1`] = `SELECT "testEntityRelation"."test_relation_id" AS "testEntityRelation_test_relation_id", "testEntityRelation"."test_entity_id" AS "testEntityRelation_test_entity_id" FROM "test_entity_relation_entity" "testEntityRelation" WHERE ("testEntityRelation"."test_entity_id" = ?)`;

exports[`RelationQueryBuilder #select many to many many-to-many custom join table should work with a many-to-many through a join table 2`] = `
Array [
  test-entity-id-1,
]
`;

exports[`RelationQueryBuilder #select many to many on non owning side should work with many to many 1`] = `SELECT "manyTestEntities"."test_entity_pk" AS "manyTestEntities_test_entity_pk", "manyTestEntities"."string_type" AS "manyTestEntities_string_type", "manyTestEntities"."bool_type" AS "manyTestEntities_bool_type", "manyTestEntities"."number_type" AS "manyTestEntities_number_type", "manyTestEntities"."date_type" AS "manyTestEntities_date_type", "manyTestEntities"."oneTestRelationTestRelationPk" AS "manyTestEntities_oneTestRelationTestRelationPk" FROM "test_entity" "manyTestEntities" INNER JOIN "test_entity_many_test_relations_test_relation" "test_entity_many_test_relations_test_relation" ON "test_entity_many_test_relations_test_relation"."testEntityTestEntityPk" = "manyTestEntities"."test_entity_pk" WHERE ("test_entity_many_test_relations_test_relation"."testRelationTestRelationPk" = ?)`;

exports[`RelationQueryBuilder #select many to many on non owning side should work with many to many 2`] = `
Array [
  test-relation-id-1,
]
`;

exports[`RelationQueryBuilder #select many to many on owning side should work with one entity 1`] = `SELECT "manyTestRelations"."test_relation_pk" AS "manyTestRelations_test_relation_pk", "manyTestRelations"."relation_name" AS "manyTestRelations_relation_name", "manyTestRelations"."test_entity_id" AS "manyTestRelations_test_entity_id", "manyTestRelations"."uni_directional_test_entity_id" AS "manyTestRelations_uni_directional_test_entity_id", "manyTestRelations"."uni_directional_relation_test_entity_id" AS "manyTestRelations_uni_directional_relation_test_entity_id" FROM "test_relation" "manyTestRelations" INNER JOIN "test_entity_many_test_relations_test_relation" "test_entity_many_test_relations_test_relation" ON "test_entity_many_test_relations_test_relation"."testRelationTestRelationPk" = "manyTestRelations"."test_relation_pk" WHERE ("test_entity_many_test_relations_test_relation"."testEntityTestEntityPk" = ?)`;

exports[`RelationQueryBuilder #select many to many on owning side should work with one entity 2`] = `
Array [
  test-entity-id-1,
]
`;

exports[`RelationQueryBuilder #select many to many uni-directional many to many should create the correct sql 1`] = `SELECT "manyToManyUniDirectional"."test_relation_pk" AS "manyToManyUniDirectional_test_relation_pk", "manyToManyUniDirectional"."relation_name" AS "manyToManyUniDirectional_relation_name", "manyToManyUniDirectional"."test_entity_id" AS "manyToManyUniDirectional_test_entity_id", "manyToManyUniDirectional"."uni_directional_test_entity_id" AS "manyToManyUniDirectional_uni_directional_test_entity_id", "manyToManyUniDirectional"."uni_directional_relation_test_entity_id" AS "manyToManyUniDirectional_uni_directional_relation_test_entity_id" FROM "test_relation" "manyToManyUniDirectional" INNER JOIN "test_entity_many_to_many_uni_directional_test_relation" "test_entity_many_to_many_uni_directional_test_relation" ON "test_entity_many_to_many_uni_directional_test_relation"."testRelationTestRelationPk" = "manyToManyUniDirectional"."test_relation_pk" WHERE ("test_entity_many_to_many_uni_directional_test_relation"."testEntityTestEntityPk" = ?)`;

exports[`RelationQueryBuilder #select many to many uni-directional many to many should create the correct sql 2`] = `
Array [
  test-entity-id-1,
]
`;

exports[`RelationQueryBuilder #select many to one should work with a uni-directional relationship 1`] = `SELECT "testEntityUniDirectional"."test_entity_pk" AS "testEntityUniDirectional_test_entity_pk", "testEntityUniDirectional"."string_type" AS "testEntityUniDirectional_string_type", "testEntityUniDirectional"."bool_type" AS "testEntityUniDirectional_bool_type", "testEntityUniDirectional"."number_type" AS "testEntityUniDirectional_number_type", "testEntityUniDirectional"."date_type" AS "testEntityUniDirectional_date_type", "testEntityUniDirectional"."oneTestRelationTestRelationPk" AS "testEntityUniDirectional_oneTestRelationTestRelationPk" FROM "test_entity" "testEntityUniDirectional" INNER JOIN "test_relation" "TestRelation" ON "TestRelation"."uni_directional_test_entity_id" = "testEntityUniDirectional"."test_entity_pk" WHERE ("TestRelation"."test_relation_pk" = ?)`;

exports[`RelationQueryBuilder #select many to one should work with a uni-directional relationship 2`] = `
Array [
  test-relation-id-1,
]
`;

exports[`RelationQueryBuilder #select many to one should work with one entity 1`] = `SELECT "testEntity"."test_entity_pk" AS "testEntity_test_entity_pk", "testEntity"."string_type" AS "testEntity_string_type", "testEntity"."bool_type" AS "testEntity_bool_type", "testEntity"."number_type" AS "testEntity_number_type", "testEntity"."date_type" AS "testEntity_date_type", "testEntity"."oneTestRelationTestRelationPk" AS "testEntity_oneTestRelationTestRelationPk" FROM "test_entity" "testEntity" INNER JOIN "test_relation" "TestRelation" ON "TestRelation"."test_entity_id" = "testEntity"."test_entity_pk" WHERE ("TestRelation"."test_relation_pk" = ?)`;

exports[`RelationQueryBuilder #select many to one should work with one entity 2`] = `
Array [
  test-relation-id-1,
]
`;

exports[`RelationQueryBuilder #select one to many should query with a single entity 1`] = `SELECT "testRelations"."test_relation_pk" AS "testRelations_test_relation_pk", "testRelations"."relation_name" AS "testRelations_relation_name", "testRelations"."test_entity_id" AS "testRelations_test_entity_id", "testRelations"."uni_directional_test_entity_id" AS "testRelations_uni_directional_test_entity_id", "testRelations"."uni_directional_relation_test_entity_id" AS "testRelations_uni_directional_relation_test_entity_id" FROM "test_relation" "testRelations" WHERE ("testRelations"."test_entity_id" = ?)`;

exports[`RelationQueryBuilder #select one to many should query with a single entity 2`] = `
Array [
  test-entity-id-1,
]
`;

exports[`RelationQueryBuilder #select one to one on non owning side 1`] = `SELECT "oneTestEntity"."test_entity_pk" AS "oneTestEntity_test_entity_pk", "oneTestEntity"."string_type" AS "oneTestEntity_string_type", "oneTestEntity"."bool_type" AS "oneTestEntity_bool_type", "oneTestEntity"."number_type" AS "oneTestEntity_number_type", "oneTestEntity"."date_type" AS "oneTestEntity_date_type", "oneTestEntity"."oneTestRelationTestRelationPk" AS "oneTestEntity_oneTestRelationTestRelationPk" FROM "test_entity" "oneTestEntity" WHERE ("oneTestEntity"."oneTestRelationTestRelationPk" = ?)`;

exports[`RelationQueryBuilder #select one to one on non owning side 2`] = `
Array [
  test-relation-id-1,
]
`;

exports[`RelationQueryBuilder #select one to one on owning side 1`] = `SELECT "oneTestRelation"."test_relation_pk" AS "oneTestRelation_test_relation_pk", "oneTestRelation"."relation_name" AS "oneTestRelation_relation_name", "oneTestRelation"."test_entity_id" AS "oneTestRelation_test_entity_id", "oneTestRelation"."uni_directional_test_entity_id" AS "oneTestRelation_uni_directional_test_entity_id", "oneTestRelation"."uni_directional_relation_test_entity_id" AS "oneTestRelation_uni_directional_relation_test_entity_id" FROM "test_relation" "oneTestRelation" INNER JOIN "test_entity" "TestEntity" ON "TestEntity"."oneTestRelationTestRelationPk" = "oneTestRelation"."test_relation_pk" WHERE ("TestEntity"."test_entity_pk" = ?)`;

exports[`RelationQueryBuilder #select one to one on owning side 2`] = `
Array [
  test-entity-id-1,
]
`;

exports[`RelationQueryBuilder #select with filter should call whereBuilder#build if there is a filter 1`] = `SELECT "testRelations"."test_relation_pk" AS "testRelations_test_relation_pk", "testRelations"."relation_name" AS "testRelations_relation_name", "testRelations"."test_entity_id" AS "testRelations_test_entity_id", "testRelations"."uni_directional_test_entity_id" AS "testRelations_uni_directional_test_entity_id", "testRelations"."uni_directional_relation_test_entity_id" AS "testRelations_uni_directional_relation_test_entity_id" FROM "test_relation" "testRelations" WHERE ("testRelations"."test_entity_id" = ?) AND ("testRelations"."relation_name" = ?)`;

exports[`RelationQueryBuilder #select with filter should call whereBuilder#build if there is a filter 2`] = `
Array [
  test-entity-id-1,
  foo,
]
`;

exports[`RelationQueryBuilder #select with paging should apply paging args going backward 1`] = `SELECT "testRelations"."test_relation_pk" AS "testRelations_test_relation_pk", "testRelations"."relation_name" AS "testRelations_relation_name", "testRelations"."test_entity_id" AS "testRelations_test_entity_id", "testRelations"."uni_directional_test_entity_id" AS "testRelations_uni_directional_test_entity_id", "testRelations"."uni_directional_relation_test_entity_id" AS "testRelations_uni_directional_relation_test_entity_id" FROM "test_relation" "testRelations" WHERE ("testRelations"."test_entity_id" = ?) LIMIT 10 OFFSET 10`;

exports[`RelationQueryBuilder #select with paging should apply paging args going backward 2`] = `
Array [
  test-entity-id-1,
]
`;

exports[`RelationQueryBuilder #select with paging should apply paging args going forward 1`] = `SELECT "testRelations"."test_relation_pk" AS "testRelations_test_relation_pk", "testRelations"."relation_name" AS "testRelations_relation_name", "testRelations"."test_entity_id" AS "testRelations_test_entity_id", "testRelations"."uni_directional_test_entity_id" AS "testRelations_uni_directional_test_entity_id", "testRelations"."uni_directional_relation_test_entity_id" AS "testRelations_uni_directional_relation_test_entity_id" FROM "test_relation" "testRelations" WHERE ("testRelations"."test_entity_id" = ?) LIMIT 10 OFFSET 11`;

exports[`RelationQueryBuilder #select with paging should apply paging args going forward 2`] = `
Array [
  test-entity-id-1,
]
`;

exports[`RelationQueryBuilder #select with sorting should apply ASC NULLS_FIRST sorting 1`] = `SELECT "testRelations"."test_relation_pk" AS "testRelations_test_relation_pk", "testRelations"."relation_name" AS "testRelations_relation_name", "testRelations"."test_entity_id" AS "testRelations_test_entity_id", "testRelations"."uni_directional_test_entity_id" AS "testRelations_uni_directional_test_entity_id", "testRelations"."uni_directional_relation_test_entity_id" AS "testRelations_uni_directional_relation_test_entity_id" FROM "test_relation" "testRelations" WHERE ("testRelations"."test_entity_id" = ?) ORDER BY "testRelations"."relation_name" ASC NULLS FIRST`;

exports[`RelationQueryBuilder #select with sorting should apply ASC NULLS_FIRST sorting 2`] = `
Array [
  test-entity-id-1,
]
`;

exports[`RelationQueryBuilder #select with sorting should apply ASC NULLS_LAST sorting 1`] = `SELECT "testRelations"."test_relation_pk" AS "testRelations_test_relation_pk", "testRelations"."relation_name" AS "testRelations_relation_name", "testRelations"."test_entity_id" AS "testRelations_test_entity_id", "testRelations"."uni_directional_test_entity_id" AS "testRelations_uni_directional_test_entity_id", "testRelations"."uni_directional_relation_test_entity_id" AS "testRelations_uni_directional_relation_test_entity_id" FROM "test_relation" "testRelations" WHERE ("testRelations"."test_entity_id" = ?) ORDER BY "testRelations"."relation_name" ASC NULLS LAST`;

exports[`RelationQueryBuilder #select with sorting should apply ASC NULLS_LAST sorting 2`] = `
Array [
  test-entity-id-1,
]
`;

exports[`RelationQueryBuilder #select with sorting should apply ASC sorting 1`] = `SELECT "testRelations"."test_relation_pk" AS "testRelations_test_relation_pk", "testRelations"."relation_name" AS "testRelations_relation_name", "testRelations"."test_entity_id" AS "testRelations_test_entity_id", "testRelations"."uni_directional_test_entity_id" AS "testRelations_uni_directional_test_entity_id", "testRelations"."uni_directional_relation_test_entity_id" AS "testRelations_uni_directional_relation_test_entity_id" FROM "test_relation" "testRelations" WHERE ("testRelations"."test_entity_id" = ?) ORDER BY "testRelations"."relation_name" ASC`;

exports[`RelationQueryBuilder #select with sorting should apply ASC sorting 2`] = `
Array [
  test-entity-id-1,
]
`;

exports[`RelationQueryBuilder #select with sorting should apply DESC NULLS_FIRST sorting 1`] = `SELECT "testRelations"."test_relation_pk" AS "testRelations_test_relation_pk", "testRelations"."relation_name" AS "testRelations_relation_name", "testRelations"."test_entity_id" AS "testRelations_test_entity_id", "testRelations"."uni_directional_test_entity_id" AS "testRelations_uni_directional_test_entity_id", "testRelations"."uni_directional_relation_test_entity_id" AS "testRelations_uni_directional_relation_test_entity_id" FROM "test_relation" "testRelations" WHERE ("testRelations"."test_entity_id" = ?) ORDER BY "testRelations"."relation_name" DESC NULLS FIRST`;

exports[`RelationQueryBuilder #select with sorting should apply DESC NULLS_FIRST sorting 2`] = `
Array [
  test-entity-id-1,
]
`;

exports[`RelationQueryBuilder #select with sorting should apply DESC NULLS_LAST sorting 1`] = `SELECT "testRelations"."test_relation_pk" AS "testRelations_test_relation_pk", "testRelations"."relation_name" AS "testRelations_relation_name", "testRelations"."test_entity_id" AS "testRelations_test_entity_id", "testRelations"."uni_directional_test_entity_id" AS "testRelations_uni_directional_test_entity_id", "testRelations"."uni_directional_relation_test_entity_id" AS "testRelations_uni_directional_relation_test_entity_id" FROM "test_relation" "testRelations" WHERE ("testRelations"."test_entity_id" = ?) ORDER BY "testRelations"."relation_name" DESC NULLS LAST`;

exports[`RelationQueryBuilder #select with sorting should apply DESC NULLS_LAST sorting 2`] = `
Array [
  test-entity-id-1,
]
`;

exports[`RelationQueryBuilder #select with sorting should apply DESC sorting 1`] = `SELECT "testRelations"."test_relation_pk" AS "testRelations_test_relation_pk", "testRelations"."relation_name" AS "testRelations_relation_name", "testRelations"."test_entity_id" AS "testRelations_test_entity_id", "testRelations"."uni_directional_test_entity_id" AS "testRelations_uni_directional_test_entity_id", "testRelations"."uni_directional_relation_test_entity_id" AS "testRelations_uni_directional_relation_test_entity_id" FROM "test_relation" "testRelations" WHERE ("testRelations"."test_entity_id" = ?) ORDER BY "testRelations"."relation_name" DESC`;

exports[`RelationQueryBuilder #select with sorting should apply DESC sorting 2`] = `
Array [
  test-entity-id-1,
]
`;

exports[`RelationQueryBuilder #select with sorting should apply multiple sorts 1`] = `SELECT "testRelations"."test_relation_pk" AS "testRelations_test_relation_pk", "testRelations"."relation_name" AS "testRelations_relation_name", "testRelations"."test_entity_id" AS "testRelations_test_entity_id", "testRelations"."uni_directional_test_entity_id" AS "testRelations_uni_directional_test_entity_id", "testRelations"."uni_directional_relation_test_entity_id" AS "testRelations_uni_directional_relation_test_entity_id" FROM "test_relation" "testRelations" WHERE ("testRelations"."test_entity_id" = ?) ORDER BY "testRelations"."relation_name" ASC, "testRelations"."test_relation_pk" DESC`;

exports[`RelationQueryBuilder #select with sorting should apply multiple sorts 2`] = `
Array [
  test-entity-id-1,
]
`;
